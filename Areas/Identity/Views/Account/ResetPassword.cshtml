@model ResetPasswordVM



@section Scripts {

    @if (@TempData["Success-Message"] is not null)
    {
        <script>
            toastr.success('@TempData["Success-Message"]')
        </script>
    }
    else if (TempData["Error-Message"] is not null)
    {
        <script>
            toastr.error('@TempData["Error-message"]')
        </script>
    }
}

<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Enter a Number</title>
    <style>
        :root {
            --radius: 18px;
            --pad: 18px;
        }

        /* White page background */
        html, body {
            height: 100%;
            background: #fff;
            margin: 0;
            font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
            color: #111;
        }

        /* Center the card nicely */
        .wrap {
            min-height: 100%;
            display: grid;
            place-items: center;
            padding: 24px;
        }

        /* Card with subtle shadow + gradient border ring */
        .card {
            position: relative;
            width: min(520px, 92vw);
            background: #fff;
            border-radius: var(--radius);
            padding: clamp(20px, 5vw, 32px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.06), 0 2px 10px rgba(0,0,0,0.04);
            overflow: hidden;
        }

            .card::before {
                content: "";
                position: absolute;
                inset: -2px;
                border-radius: calc(var(--radius) + 2px);
                background: conic-gradient( from 120deg, #8bc6ff, #e0aaff, #b9fbc0, #ffd6a5, #8bc6ff );
                filter: blur(12px) saturate(1.2);
                opacity: 0.25;
                z-index: -1;
            }

        h1 {
            font-size: clamp(22px, 2.4vw, 28px);
            margin: 0 0 14px;
            letter-spacing: 0.2px;
        }

        p.sub {
            margin: 0 0 22px;
            color: #555;
            font-size: 14px;
        }

        /* Input block */
        .field {
            display: grid;
            gap: 8px;
            margin-bottom: 14px;
        }

        label {
            font-size: 13px;
            color: #444;
        }

        input[type="number"] {
            appearance: textfield; /* hide spinners on most browsers */
            width: 100%;
            padding: 12px 14px;
            font-size: 16px;
            border-radius: 14px;
            border: 1px solid #e6e6e6;
            background: #fff;
            outline: none;
            transition: border-color .2s, box-shadow .2s, transform .04s ease;
        }

            input[type="number"]:focus {
                border-color: #9ec5fe;
                box-shadow: 0 0 0 6px rgba(51, 122, 255, 0.12);
            }

            input[type="number"]:active {
                transform: scale(0.999);
            }

        /* Helper + error text */
        .hint {
            font-size: 12px;
            color: #6b7280;
            min-height: 16px;
        }

        .error {
            color: #b91c1c;
        }

        /* Button */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            gap: 8px;
            padding: 12px 16px;
            border-radius: 14px;
            border: 0;
            font-weight: 600;
            font-size: 15px;
            background: linear-gradient(180deg, #2f6dfd, #2052d6);
            color: white;
            cursor: pointer;
            transition: transform .05s ease, filter .2s ease, box-shadow .2s ease;
            box-shadow: 0 8px 22px rgba(47, 109, 253, 0.25);
        }

            .btn:hover {
                filter: brightness(1.03);
            }

            .btn:active {
                transform: translateY(1px);
            }

            .btn:disabled {
                opacity: .55;
                cursor: not-allowed;
                box-shadow: none;
            }

        /* Result badge */
        .result {
            margin-top: 14px;
            font-size: 14px;
            padding: 10px 12px;
            border-radius: 12px;
            background: #f5f7ff;
            color: #1f2a44;
            display: none;
        }

            .result.show {
                display: block;
            }
    </style>
</head>
<body>
    <main class="wrap">
       
     <form method="post">

            <section class="card" role="form" aria-labelledby="title">
                <h1 id="title">Enter a Number</h1>
                <p class="sub">Type any number, then tap Confirm.</p>
                <input type="hidden" name="ApplicationUserID" value="@Model.ApplicationUserID" />
                <div class="field">
                    <label for="number">OTPnumber</label>
                    <input id="number" name="OTPnumber" type="number" inputmode="numeric" placeholder="e.g. 42" />
                    <div id="hint" class="hint">Only digits are allowed.</div>
                </div>

                <button type="submit" class="submit-btn">Confirm
                    
                </button>

                <div id="result" class="result" role="status" aria-live="polite"></div>
            </section>


     </form>
    </main>

    <script>
        const input = document.getElementById('number');
        const btn = document.getElementById('confirm');
        const hint = document.getElementById('hint');
        const result = document.getElementById('result');

        const isValid = (v) => v.trim() !== '' && !Number.isNaN(Number(v));

        input.addEventListener('input', () => {
          if (isValid(input.value)) {
            btn.disabled = false;
            hint.textContent = 'Looks good. Press Confirm.';
            hint.classList.remove('error');
          } else {
            btn.disabled = true;
            hint.textContent = 'Please enter a valid number.';
            hint.classList.add('error');
          }
        });

        btn.addEventListener('click', () => {
          const value = Number(input.value);
          result.textContent = `You entered: ${value}`;
          result.classList.add('show');
          // playful micro-feedback
          btn.animate([{ transform: 'translateY(0)' }, { transform: 'translateY(1px)' }, { transform: 'translateY(0)' }], { duration: 120, iterations: 1 });
        });
    </script>
</body>
</html>
